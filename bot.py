# -*- coding: utf-8 -*-
# Namangan Cargo Bot ‚Äî aiogram 3.22.0
# –†–æ–ª–ª–∞—Ä: –ú–∏–∂–æ–∑, “≤–∞–π–¥–æ–≤—á–∏, –ê–¥–º–∏–Ω
# –ë–∞–∑–∞: SQLite
# Yangiliklar:
#  - Buyurtma avval adminlarga boradi: –∫–æ–º–∏—Å—Å–∏—è 5000/10000/15000 tugmalaridan tanlanadi
#  - –ö–æ–º–∏—Å—Å–∏—è orders.commission maydonida, admin tasdiqlagach haydovchilarga push
#  - Haydovchi qabul qilganda balansdan komissiya yechiladi (yetmasa qabul qila olmaydi)
#  - Yangi ro‚Äòyxatdan o‚Äòtgan haydovchiga 99 000 so‚Äòm bonus
#  - Mijozdan telefon so‚Äòraladi; haydovchi qabul qilgach, username + telefon beriladi

import os
import asyncio
import sqlite3
import re
from contextlib import closing
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime

# =======================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =======================
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = {1262207928, 555555555}

DB_FILE = "cargo.db"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# =======================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =======================
def db():
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row
    return conn

def _column_exists(conn, table: str, col: str) -> bool:
    cols = conn.execute(f"PRAGMA table_info({table})").fetchall()
    return any(c["name"] == col for c in cols)

def init_db():
    with closing(db()) as conn, conn:
        cur = conn.cursor()
        # orders
        cur.execute("""
        CREATE TABLE IF NOT EXISTS orders(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER,
            from_address TEXT,
            to_address TEXT,
            cargo_type TEXT,
            car_type TEXT,
            cargo_weight REAL,
            date TEXT,
            status TEXT CHECK(status IN ('pending_fee','open','taken','done')) DEFAULT 'pending_fee',
            driver_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            customer_username TEXT,
            customer_phone TEXT,
            commission INTEGER
        )""")
        # ensure columns exist
        for col, coldef in [
            ("commission", "INTEGER"),
            ("status", "TEXT DEFAULT 'pending_fee'"),
            ("customer_phone", "TEXT"),
            ("customer_username", "TEXT"),
            ("car_type", "TEXT"),
        ]:
            if not _column_exists(conn, "orders", col):
                conn.execute(f"ALTER TABLE orders ADD COLUMN {col} {coldef}")

        # drivers
        cur.execute("""
        CREATE TABLE IF NOT EXISTS drivers(
            driver_id INTEGER PRIMARY KEY,
            username TEXT,
            phone TEXT,
            balance REAL DEFAULT 0
        )""")
        if not _column_exists(conn, "drivers", "balance"):
            conn.execute("ALTER TABLE drivers ADD COLUMN balance REAL DEFAULT 0")

# =======================
# –ö–õ–ê–í–ò–ê–¢–£–†–ê–õ–ê–†
# =======================
def role_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöñ “≤–∞–π–¥–æ–≤—á–∏"), KeyboardButton(text="üë§ –ú–∏–∂–æ–∑")]
        ],
        resize_keyboard=True
    )

def car_type_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöê –õ–∞–±–æ"), KeyboardButton(text="üöõ –ë–æ–Ω–≥–æ")],
            [KeyboardButton(text="üöö –ò—Å—É–∑–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à")]
        ],
        resize_keyboard=True
    )

def customer_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –Ø–Ω–≥–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞")]
        ],
        resize_keyboard=True
    )

def driver_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ë—û—à –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")]
        ],
        resize_keyboard=True
    )

def admin_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ë–∞—Ä—á–∞ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")],
            [KeyboardButton(text="üöñ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä")],
            [KeyboardButton(text="üíµ –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à")]
        ],
        resize_keyboard=True
    )

def phone_request_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à", request_contact=True)]],
        resize_keyboard=True
    )

def topup_amount_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5 000", callback_data="adm_topup_amt:5000"),
         InlineKeyboardButton(text="10 000", callback_data="adm_topup_amt:10000"),
         InlineKeyboardButton(text="15 000", callback_data="adm_topup_amt:15000")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ë–æ—à“õ–∞ —Å—É–º–º–∞", callback_data="adm_topup_amt:other")]
    ])

def commission_kb(order_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5 000", callback_data=f"setfee:{order_id}:5000"),
         InlineKeyboardButton(text="10 000", callback_data=f"setfee:{order_id}:10000"),
         InlineKeyboardButton(text="15 000", callback_data=f"setfee:{order_id}:15000")]
    ])

# =======================
# FSM
# =======================
class NewOrder(StatesGroup):
    from_address = State()
    to_address = State()
    cargo_type = State()
    car_type = State()
    cargo_weight = State()
    ask_phone = State()

class DriverRegistration(StatesGroup):
    ask_phone = State()

class BalanceTopUp(StatesGroup):
    choose_driver = State()
    enter_amount = State()

class AdminTopUpData(StatesGroup):
    # ichki yordamchi holat (driver_id saqlash)
    target_driver = State()
    custom_amount = State()

# =======================
# YORDAMCHI FUNKSIYALAR
# =======================
def list_driver_ids() -> list[int]:
    with closing(db()) as conn:
        rows = conn.execute("SELECT driver_id FROM drivers").fetchall()
        return [r["driver_id"] for r in rows]

async def push_new_order_to_drivers(order_row: sqlite3.Row):
    """Admin –∫–æ–º–∏—Å—Å–∏—è –±–µ–ª–≥–∏–ª–∞–≥–∞–Ω–¥–∞–Ω –∫–µ–π–∏–Ω ‚Äî barcha haydovchilarga push."""
    fee = order_row["commission"] or 0
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept:{order_row['id']}"),
        InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject:{order_row['id']}")
    ]])
    text = (
        f"üì¢ <b>–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞!</b>\n\n"
        f"üÜî {order_row['id']} | {order_row['date']}\n"
        f"üìç {order_row['from_address']} ‚ûú {order_row['to_address']}\n"
        f"üì¶ {order_row['cargo_type']} | üöò {order_row['car_type']} | ‚öñÔ∏è {order_row['cargo_weight']} –∫–≥\n"
        f"üíµ –ö–æ–º–∏—Å—Å–∏—è: <b>{fee}</b> —Å—û–º\n\n"
        f"–ë–∏—Ä–∏–Ω—á–∏ –±—û–ª–∏–± “õ–∞–±—É–ª “õ–∏–ª–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–≥–∞ –±–∏—Ä–∏–∫—Ç–∏—Ä–∏–ª–∞–¥–∏."
    )
    for did in list_driver_ids():
        try:
            await bot.send_message(did, text, reply_markup=kb)
        except Exception:
            pass

# =======================
# –°–¢–ê–†–¢
# =======================
@router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üëã –°–∏–∑ –∞–¥–º–∏–Ω —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–¥–∏–Ω–≥–∏–∑!", reply_markup=admin_menu_kb())
        return

    with closing(db()) as conn:
        driver = conn.execute("SELECT * FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()

    if driver:
        await message.answer("üëã –°–∞–ª–æ–º, “≥–∞–π–¥–æ–≤—á–∏!", reply_markup=driver_menu_kb())
    else:
        await message.answer("üëã –°–∞–ª–æ–º! –ò–ª—Ç–∏–º–æ—Å, —Ä–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=role_kb())

# =======================
# –†–û–õ –¢–ê–ù–õ–ê–®
# =======================
@router.message(F.text == "üë§ –ú–∏–∂–æ–∑")
async def role_customer(message: Message):
    await message.answer("‚úÖ –°–∏–∑ –º–∏–∂–æ–∑ —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑!", reply_markup=customer_menu_kb())

@router.message(F.text == "üöñ “≤–∞–π–¥–æ–≤—á–∏")
async def role_driver(message: Message, state: FSMContext):
    await state.set_state(DriverRegistration.ask_phone)
    await message.answer("üì± –ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=phone_request_kb())

@router.message(DriverRegistration.ask_phone, F.contact)
async def driver_save_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    uname = message.from_user.username
    with closing(db()) as conn:
        old = conn.execute("SELECT driver_id FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()

    with closing(db()) as conn, conn:
        # yangi haydovchi bo'lsa ‚Äî 99 000 bonus
        if old is None:
            conn.execute(
                "INSERT INTO drivers(driver_id, username, phone, balance) VALUES(?,?,?,?)",
                (message.from_user.id, f"@{uname}" if uname else None, phone, 99000)
            )
            await message.answer("üéâ –Ø–Ω–≥–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω –±–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑–≥–∞ –±–æ–Ω—É—Å —Å–∏—Ñ–∞—Ç–∏–¥–∞ <b>99 000</b> —Å—û–º —Ç—û–ª–¥–∏—Ä–∏–ª–¥–∏!")
        else:
            conn.execute(
                "UPDATE drivers SET username=?, phone=? WHERE driver_id=?",
                (f"@{uname}" if uname else None, phone, message.from_user.id)
            )

    await state.clear()
    await message.answer("‚úÖ –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑!", reply_markup=driver_menu_kb())

# =======================
# –ú–ò–ñ–û–ó –ë–£–Æ–†–¢–ú–ê (—Å–∞–Ω–∞/–≤–∞“õ—Ç ‚Äî –∞–≤—Ç–æ)
# =======================
@router.message(F.text == "üìù –Ø–Ω–≥–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞")
async def new_order(message: Message, state: FSMContext):
    await state.set_state(NewOrder.from_address)
    await message.answer("üìç “ö–∞–µ—Ä–¥–∞–Ω —é–∫ –æ–ª–∏–Ω–∞–¥–∏? –ú–∞–Ω–∑–∏–ª–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")

@router.message(NewOrder.from_address, F.text)
async def order_from(message: Message, state: FSMContext):
    await state.update_data(from_address=message.text.strip())
    await state.set_state(NewOrder.to_address)
    await message.answer("üìç “ö–∞–µ—Ä–≥–∞ —é–±–æ—Ä–∏–ª–∞–¥–∏? –ú–∞–Ω–∑–∏–ª–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")

@router.message(NewOrder.to_address, F.text)
async def order_to(message: Message, state: FSMContext):
    await state.update_data(to_address=message.text.strip())
    await state.set_state(NewOrder.cargo_type)
    await message.answer("üì¶ –Æ–∫ —Ç—É—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")

@router.message(NewOrder.cargo_type, F.text)
async def order_cargo(message: Message, state: FSMContext):
    await state.update_data(cargo_type=message.text.strip())
    await state.set_state(NewOrder.car_type)
    await message.answer("üöò “ö–∞–π—Å–∏ –º–∞—à–∏–Ω–∞ –∫–µ—Ä–∞–∫? –¢—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=car_type_kb())

@router.message(NewOrder.car_type, F.text)
async def order_car(message: Message, state: FSMContext):
    if message.text not in ["üöê –õ–∞–±–æ", "üöõ –ë–æ–Ω–≥–æ", "üöö –ò—Å—É–∑–∏", "‚¨ÖÔ∏è –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à"]:
        await message.answer("‚ùå –ò–ª—Ç–∏–º–æ—Å, —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥.")
        return
    if message.text == "‚¨ÖÔ∏è –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à":
        await state.clear()
        await message.answer("‚ùå –ë—É—é—Ä—Ç–º–∞ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.", reply_markup=customer_menu_kb())
        return
    await state.update_data(car_type=message.text)
    await state.set_state(NewOrder.cargo_weight)
    await message.answer("‚öñÔ∏è –Æ–∫ –æ“ì–∏—Ä–ª–∏–≥–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–∫–≥):", reply_markup=ReplyKeyboardMarkup(keyboard=[[]], resize_keyboard=True))

@router.message(NewOrder.cargo_weight, F.text)
async def order_weight(message: Message, state: FSMContext):
    val = message.text.strip().replace(",", ".")
    if not re.match(r"^\d+(\.\d+)?$", val):
        await message.answer("‚ùå –§–∞“õ–∞—Ç —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: 150 —ë–∫–∏ 75.5).")
        return
    await state.update_data(cargo_weight=float(val))
    # mijoz telefoni so'raladi
    await state.set_state(NewOrder.ask_phone)
    await message.answer("üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ —Ç—É–≥–º–∞–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥:", reply_markup=phone_request_kb())

@router.message(NewOrder.ask_phone)
async def order_phone(message: Message, state: FSMContext):
    phone = None
    if getattr(message, "contact", None):
        if not message.contact.user_id or message.contact.user_id == message.from_user.id:
            phone = message.contact.phone_number
    if not phone and message.text:
        t = message.text.strip()
        if re.match(r"^\+?\d[\d\s\-\(\)]{7,}$", t):
            phone = t

    if not phone:
        await message.answer("‚ùó –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —Ç—û“ì—Ä–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ ¬´üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à¬ª —Ç—É–≥–º–∞—Å–∏–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.")
        return

    data = await state.get_data()
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    uname = message.from_user.username
    customer_username = f"@{uname}" if uname else f"id:{message.from_user.id}"

    with closing(db()) as conn, conn:
        conn.execute("""
            INSERT INTO orders(
                customer_id, from_address, to_address, cargo_type, car_type, cargo_weight, date,
                status, customer_username, customer_phone
            )
            VALUES(?,?,?,?,?,?,?, 'pending_fee', ?, ?)
        """, (
            message.from_user.id,
            data["from_address"], data["to_address"],
            data["cargo_type"], data["car_type"],
            data["cargo_weight"], now,
            customer_username, phone
        ))
        order_id = conn.execute("SELECT last_insert_rowid() AS id").fetchone()["id"]

    await state.clear()
    await message.answer(
        f"‚úÖ –ë—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ #{order_id} “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!\n"
        f"–ê–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω –∫–æ–º–∏—Å—Å–∏—è –±–µ–ª–≥–∏–ª–∞–Ω–≥–∞–Ω–¥–∞–Ω —Å—û–Ω–≥ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∞—Ç–∏–ª–∞–¥–∏.",
        reply_markup=customer_menu_kb()
    )

    # Adminlarga yuborish ‚Äî –∫–æ–º–∏—Å—Å–∏—è–Ω–∏ —Ç–∞–Ωlash tugmalari –±–∏–ª–∞–Ω
    with closing(db()) as conn:
        order = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()

    text_admin = (
        f"üÜï <b>–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞ (–∫–æ–º–∏—Å—Å–∏—è –∫—É—Ç–∏–ª–∞—è–ø—Ç–∏)</b>\n\n"
        f"üÜî {order['id']} | {order['date']}\n"
        f"üìç {order['from_address']} ‚ûú {order['to_address']}\n"
        f"üì¶ {order['cargo_type']} | üöò {order['car_type']} | ‚öñÔ∏è {order['cargo_weight']} –∫–≥\n"
        f"üë§ –ú–∏–∂–æ–∑: {order['customer_username']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['customer_phone']}\n\n"
        f"–ö–æ–º–∏—Å—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"
    )
    for aid in ADMIN_IDS:
        try:
            await bot.send_message(aid, text_admin, reply_markup=commission_kb(order_id))
        except Exception:
            pass

# =======================
# ADMIN: –∫–æ–º–∏—Å—Å–∏—è–Ω–∏ —û—Ä–Ω–∞—Ç–∏—à
# =======================
@router.callback_query(F.data.startswith("setfee:"))
async def set_fee(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–ª–∞—Ä —É—á—É–Ω.", show_alert=True)
        return
    try:
        _, oid, fee = callback.data.split(":")
        order_id = int(oid)
        fee = int(fee)
    except Exception:
        await callback.answer("–ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç.", show_alert=True)
        return

    with closing(db()) as conn, conn:
        row = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
        if not row:
            await callback.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True); return
        if row["status"] != "pending_fee":
            await callback.answer("–ö–æ–º–∏—Å—Å–∏—è –∞–ª–ª–∞“õ–∞—á–æ–Ω –±–µ–ª–≥–∏–ª–∞–Ω–≥–∞–Ω.", show_alert=True); return

        conn.execute("UPDATE orders SET commission=?, status='open' WHERE id=?", (fee, order_id))

    await callback.answer("–ö–æ–º–∏—Å—Å–∏—è —û—Ä–Ω–∞—Ç–∏–ª–¥–∏. “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # haydovchilarga push
    with closing(db()) as conn:
        order = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
    await push_new_order_to_drivers(order)

# =======================
# “≤–ê–ô–î–û–í–ß–ò: –ë—û—à –±—É—é—Ä—Ç–º–∞–ª–∞—Ä (“õ—û–ª–¥–∞ –∫—û—Ä–∏—à)
# =======================
@router.message(F.text == "üìú –ë—û—à –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")
async def free_orders(message: Message):
    with closing(db()) as conn:
        rows = conn.execute("SELECT * FROM orders WHERE status='open' ORDER BY id DESC LIMIT 20").fetchall()
    if not rows:
        await message.answer("üì≠ “≤–æ–∑–∏—Ä—á–∞ –±—û—à –±—É—é—Ä—Ç–º–∞ –π—û“õ.")
        return
    for r in rows:
        fee = r["commission"] or 0
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept:{r['id']}"),
             InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject:{r['id']}")]
        ])
        text = (f"üÜî {r['id']} | {r['date']}\n"
                f"üìç {r['from_address']} ‚ûú {r['to_address']}\n"
                f"üì¶ {r['cargo_type']} | üöò {r['car_type']} | ‚öñÔ∏è {r['cargo_weight']} –∫–≥\n"
                f"üíµ –ö–æ–º–∏—Å—Å–∏—è: <b>{fee}</b> —Å—û–º")
        await message.answer(text, reply_markup=kb)

# =======================
# “ö–ê–ë–£–õ / –†–ê–î
# =======================
@router.callback_query(F.data.startswith("accept:"))
async def accept_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    with closing(db()) as conn:
        d = conn.execute("SELECT balance, phone, username FROM drivers WHERE driver_id=?", (callback.from_user.id,)).fetchone()
    if not d:
        await callback.answer("“≤–∞–π–¥–æ–≤—á–∏ —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥.", show_alert=True); return

    with closing(db()) as conn:
        order = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
    if not order or order["status"] != "open":
        await callback.answer("‚ùå –ë—É—é—Ä—Ç–º–∞ “õ–æ–ª–º–∞–≥–∞–Ω —ë–∫–∏ –∞–ª–ª–∞“õ–∞—á–æ–Ω –æ–ª–∏–Ω–≥–∞–Ω.", show_alert=True)
        return

    fee = int(order["commission"] or 0)
    if (d["balance"] or 0) < fee:
        await callback.answer(f"‚ùå –ë–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑ –µ—Ç–∞—Ä–ª–∏ —ç–º–∞—Å. –ö–µ—Ä–∞–∫: {fee} —Å—û–º.", show_alert=True)
        return

    # atomik: status tekshirish + update + balance yechish
    with closing(db()) as conn, conn:
        row = conn.execute("SELECT status FROM orders WHERE id=?", (order_id,)).fetchone()
        if not row or row["status"] != "open":
            await callback.answer("‚ùå –ö–µ—á–∏–∫–¥–∏–Ω–≥–∏–∑, –±—É—é—Ä—Ç–º–∞ –±–∞–Ω–¥ –±—û–ª–¥–∏.", show_alert=True); return

        # band qilish
        conn.execute("UPDATE orders SET status='taken', driver_id=? WHERE id=? AND status='open'",
                     (callback.from_user.id, order_id))
        # balansdan yechish
        conn.execute("UPDATE drivers SET balance = balance - ? WHERE driver_id=?", (fee, callback.from_user.id))

    await callback.answer("‚úÖ –ë—É—é—Ä—Ç–º–∞ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # haydovchiga mijoz kontaktlari
    phone_line = f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{order['customer_phone']}</b>\n" if order["customer_phone"] else ""
    username_line = f"üë§ Telegram: <b>{order['customer_username']}</b>\n"
    deep_link = f"<a href='tg://user?id={order['customer_id']}'>TG –æ—Ä“õ–∞–ª–∏ —ë–∑–∏—à</a>"

    await bot.send_message(
        callback.from_user.id,
        "üöö –ë—É—é—Ä—Ç–º–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏ (“≥–∞–π–¥–æ–≤—á–∏ —É—á—É–Ω):\n"
        f"üÜî #{order_id}\n"
        f"üìç {order['from_address']} ‚ûú {order['to_address']}\n"
        f"üì¶ {order['cargo_type']} | üöò {order['car_type']} | ‚öñÔ∏è {order['cargo_weight']} –∫–≥\n\n"
        f"{username_line}{phone_line}{deep_link}",
        reply_markup=driver_menu_kb()
    )

    # mijozga xabar
    try:
        await bot.send_message(order["customer_id"], "‚úÖ –°–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ “≥–∞–π–¥–æ–≤—á–∏ —Ç–æ–º–æ–Ω–∏–¥–∞–Ω “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏.")
    except Exception:
        pass

@router.callback_query(F.data.startswith("reject:"))
async def reject_order(callback: CallbackQuery):
    await callback.answer("‚ùå –°–∏–∑ —Ä–∞–¥ —ç—Ç–¥–∏–Ω–≥–∏–∑.")

# =======================
# –ë–ê–õ–ê–ù–° (“≤–∞–π–¥–æ–≤—á–∏)
# =======================
@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def driver_balance(message: Message):
    with closing(db()) as conn:
        driver = conn.execute("SELECT balance FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
    if not driver:
        await message.answer("‚ùå –ë–∞–ª–∞–Ω—Å —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return
    await message.answer(f"üí∞ –°–∏–∑–Ω–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑: <b>{int(driver['balance'])}</b> —Å—û–º")

@router.message(F.text == "üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")
async def contact_admin(message: Message):
    # –ë—É –µ—Ä–≥–∞ —û–∑ –∞–¥–º–∏–Ω —é–∑–µ—Ä–Ω–µ–π–º(–ª–∞—Ä)–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥
    admins = ", ".join([f"<a href='tg://user?id={aid}'>@zaaaza13</a>" for aid in ADMIN_IDS])
    await message.answer(f"üìû –ê–¥–º–∏–Ω–ª–∞—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à: {admins}", disable_web_page_preview=True)

# =======================
# –ê–î–ú–ò–ù: –†—û–π—Ö–∞—Ç–ª–∞—Ä
# =======================
@router.message(F.text == "üìä –ë–∞—Ä—á–∞ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")
async def all_orders(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with closing(db()) as conn:
        rows = conn.execute("SELECT * FROM orders ORDER BY id DESC LIMIT 50").fetchall()
    if not rows:
        await message.answer("üì≠ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä –π—û“õ.")
        return
    text = "<b>üìä –û—Ö–∏—Ä–≥–∏ 50 –±—É—é—Ä—Ç–º–∞:</b>\n\n"
    for r in rows:
        fee = r["commission"] if r["commission"] is not None else "‚Äî"
        text += (f"üÜî {r['id']} | {r['date']} | {r['from_address']} ‚ûú {r['to_address']}\n"
                 f"üì¶ {r['cargo_type']} | üöò {r['car_type']} | ‚öñÔ∏è {r['cargo_weight']} –∫–≥ | “≤–æ–ª–∞—Ç: {r['status']} | –ö–æ–º–∏—Å—Å–∏—è: {fee}\n"
                 f"üë§ {r['customer_username']} | üìû {r['customer_phone']} | Haydovchi: {r['driver_id']}\n\n")
    await message.answer(text)

@router.message(F.text == "üöñ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä")
async def list_drivers(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with closing(db()) as conn:
        rows = conn.execute("SELECT * FROM drivers").fetchall()
    if not rows:
        await message.answer("üì≠ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return
    text = "<b>üöñ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä:</b>\n\n"
    for r in rows:
        text += f"üÜî {r['driver_id']} | {r['username']} | üìû {r['phone']} | üí∞ {int(r['balance'])} —Å—û–º\n"
    await message.answer(text)

# =======================
# –ê–î–ú–ò–ù: –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à
# =======================
@router.message(F.text == "üíµ –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à")
async def admin_topup_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    with closing(db()) as conn:
        rows = conn.execute("SELECT driver_id, username FROM drivers").fetchall()
    if not rows:
        await message.answer("üì≠ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text=f"{r['username'] or r['driver_id']}",
            callback_data=f"topup:{r['driver_id']}")] for r in rows]
    )
    await state.set_state(BalanceTopUp.choose_driver)
    await message.answer("üë§ “ö–∞–π—Å–∏ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ –±–∞–ª–∞–Ω—Å “õ—û—à–∞—Å–∏–∑?", reply_markup=kb)

@router.callback_query(F.data.startswith("topup:"))
async def topup_choose(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return
    driver_id = int(callback.data.split(":")[1])
    await state.update_data(driver_id=driver_id)
    await callback.message.answer("üíµ –ú–∏“õ–¥–æ—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ —ë–∫–∏ ¬´‚úçÔ∏è –ë–æ—à“õ–∞ —Å—É–º–º–∞¬ª:", reply_markup=topup_amount_kb())
    await state.set_state(AdminTopUpData.target_driver)
    await callback.answer()

@router.callback_query(F.data.startswith("adm_topup_amt:"))
async def topup_amount_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return
    choice = callback.data.split(":")[1]
    data = await state.get_data()
    driver_id = data.get("driver_id") or data.get("target_driver")
    if driver_id is None:
        # fallback
        await callback.answer("–ò—á–∫–∏ —Ö–∞—Ç–æ–ª–∏–∫."); return

    if choice == "other":
        await state.update_data(target_driver=driver_id)
        await state.set_state(AdminTopUpData.custom_amount)
        await callback.message.answer("‚úçÔ∏è –°—É–º–º–∞–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (—Å—û–º, –±—É—Ç—É–Ω —Ä–∞“õ–∞–º):")
        await callback.answer()
        return

    amount = int(choice)
    with closing(db()) as conn, conn:
        conn.execute("UPDATE drivers SET balance = balance + ? WHERE driver_id=?", (amount, driver_id))
    await state.clear()
    await callback.message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å {driver_id} —É—á—É–Ω <b>{amount}</b> —Å—û–º–≥–∞ —Ç—û–ª–¥–∏—Ä–∏–ª–¥–∏.")
    await callback.answer()

@router.message(AdminTopUpData.custom_amount, F.text)
async def topup_custom_amount(message: Message, state: FSMContext):
    txt = message.text.strip()
    if not txt.isdigit():
        await message.answer("‚ùó –§–∞“õ–∞—Ç –±—É—Ç—É–Ω —Å–æ–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω, 75000).")
        return
    amount = int(txt)
    data = await state.get_data()
    driver_id = data.get("driver_id") or data.get("target_driver")
    with closing(db()) as conn, conn:
        conn.execute("UPDATE drivers SET balance = balance + ? WHERE driver_id=?", (amount, driver_id))
    await state.clear()
    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å {driver_id} —É—á—É–Ω <b>{amount}</b> —Å—û–º–≥–∞ —Ç—û–ª–¥–∏—Ä–∏–ª–¥–∏.", reply_markup=admin_menu_kb())

# =======================
# MAIN
# =======================
@dp.message(commands=["start"])
async def main():
    init_db()
    print("üöÄ Bot –∏—à–≥–∞ —Ç—É—à–¥–∏...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
