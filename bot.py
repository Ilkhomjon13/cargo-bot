# -*- coding: utf-8 -*-
"""
cargobot_updated.py
To'liq ishlaydigan bot:
- Haydovchi ro'yxatdan o'tishi (telefon, ism, mashina rusumi tugmalar yoki custom)
- Mijoz buyurtma berishi
- Admin: buyurtmalar, haydovchilar, mijozlar, balans to'ldirish, broadcast, block/unblock
- Kvitansiya (photo) yuklanishi va admin tomonidan tasdiqlanishi
"""
import asyncio
import sqlite3
import re
from contextlib import closing
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --------------------------
# SETTINGS: edit these
# --------------------------
BOT_TOKEN = "7370665741:AAEbYoKM5_S2XLDGLqO2re8hnPeAUhjSF7g"
# add your admin IDs here (integers)
ADMIN_IDS = {1262207928, 8011859232}
DB_FILE = "cargoof.db"

# --------------------------
# BOT INIT
# --------------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --------------------------
# DATABASE HELPERS
# --------------------------
def db():
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with closing(db()) as conn:
        cur = conn.cursor()
        cur.execute("""
        CREATE TABLE IF NOT EXISTS drivers(
            driver_id INTEGER PRIMARY KEY,
            username TEXT,
            phone TEXT,
            full_name TEXT,
            car_model TEXT,
            balance REAL DEFAULT 0,
            status TEXT DEFAULT 'active'
        )""")
        cur.execute("""
        CREATE TABLE IF NOT EXISTS customers(
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            phone TEXT,
            full_name TEXT,
            status TEXT DEFAULT 'active'
        )""")
        cur.execute("""
        CREATE TABLE IF NOT EXISTS orders(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER,
            from_address TEXT,
            to_address TEXT,
            cargo_type TEXT,
            car_type TEXT,
            cargo_weight REAL,
            date TEXT,
            status TEXT DEFAULT 'pending_fee', -- pending_fee/open/taken/done
            driver_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            customer_username TEXT,
            customer_phone TEXT,
            commission INTEGER,
            creator_role TEXT DEFAULT 'customer'
        )""")
        cur.execute("""
        CREATE TABLE IF NOT EXISTS receipts(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            driver_id INTEGER,
            file_id TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )""")
        conn.commit()
def add_full_name_column():
    conn = sqlite3.connect("cargoof.db")  # O'zingizning bazangiz nomi
    cur = conn.cursor()
    try:
        cur.execute("ALTER TABLE customers ADD COLUMN full_name TEXT;")
        print("full_name ustuni qo‚Äòshildi!")
    except sqlite3.OperationalError as e:
        print("Xatolik:", e)
    conn.commit()
    conn.close()

# --------------------------
# KEYBOARDS
# --------------------------
def role_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöñ “≤–∞–π–¥–æ–≤—á–∏"), KeyboardButton(text="üë§ –ú–∏–∂–æ–∑")]],
        resize_keyboard=True
    )

def car_type_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöê –õ–∞–±–æ"), KeyboardButton(text="üöõ –ë–æ–Ω–≥–æ")],
            [KeyboardButton(text="üöö –ò—Å—É–∑–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à")]
        ],
        resize_keyboard=True
    )

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def customer_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –Ø–Ω–≥–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞")],
            [KeyboardButton(text="üìù –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üè† –ë–æ—à –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def driver_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –Ø–Ω–≥–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞")],
            [KeyboardButton(text="üìú –ë—û—à –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")],
            [KeyboardButton(text="üìù –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí≥ –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à (–∫–≤–∏—Ç–∞–Ω—Å–∏—è)")],
            [KeyboardButton(text="üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")],
            [KeyboardButton(text="üè† –ë–æ—à –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def admin_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ë–∞—Ä—á–∞ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")],
            [KeyboardButton(text="üöñ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä"), KeyboardButton(text="üë• –ú–∏–∂–æ–∑–ª–∞—Ä")],
            [KeyboardButton(text="üíµ –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à")],
            [KeyboardButton(text="üì¢ –•–∞–±–∞—Ä —é–±–æ—Ä–∏—à")],
            [KeyboardButton(text="üè† –ë–æ—à –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def phone_request_kb():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à", request_contact=True)]], resize_keyboard=True)


class CustomerReg(StatesGroup):
    waiting_for_phone = State()
    waiting_for_fullname = State()


@router.message(F.text == "üë§ –ú–∏–∂–æ–∑")
async def customer_start(message: Message, state: FSMContext):
    await message.answer("üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=phone_request_kb())
    await state.set_state(CustomerReg.waiting_for_phone)


@router.message(CustomerReg.waiting_for_phone, F.contact)
async def customer_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer("üë§ –ò—Å–º –≤–∞ —Ñ–∞–º–∏–ª–∏—è–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await state.set_state(CustomerReg.waiting_for_fullname)


@router.message(CustomerReg.waiting_for_fullname)
async def customer_fullname(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data["phone"]
    full_name = message.text
    user_id = message.from_user.id
    username = message.from_user.username

    with db() as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT OR REPLACE INTO customers (user_id, username, phone, full_name, status)
            VALUES (?, ?, ?, ?, 'active')
        """, (user_id, username, phone, full_name))
        conn.commit()

    await message.answer("‚úÖ –°–∏–∑ –º–∏–∂–æ–∑ —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑!", reply_markup=customer_menu_kb())
    await state.clear()


def commission_kb(order_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5 000", callback_data=f"setfee:{order_id}:5000"),
         InlineKeyboardButton(text="10 000", callback_data=f"setfee:{order_id}:10000"),
         InlineKeyboardButton(text="15 000", callback_data=f"setfee:{order_id}:15000")]
    ])

def topup_amount_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5 000", callback_data="adm_topup_amt:5000"),
         InlineKeyboardButton(text="10 000", callback_data="adm_topup_amt:10000")],
        [InlineKeyboardButton(text="50 000", callback_data="adm_topup_amt:50000"),
         InlineKeyboardButton(text="100 000", callback_data="adm_topup_amt:100000")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ë–æ—à“õ–∞ —Å—É–º–º–∞", callback_data="adm_topup_amt:other")]
    ])
# --- Admin bilan bog'lanish ---
@router.message(F.text == "üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")
async def contact_admin(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë®‚Äçüíª Developer", url="https://t.me/zaaaza13")],
        [InlineKeyboardButton(text="üë®‚Äçüíª Admin  üíª", url="https://t.me/Rabo_logos")]
    ])
    await message.answer("üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=kb)

# --------------------------
# FSM STATES
# --------------------------
class NewOrder(StatesGroup):
    from_address = State()
    to_address = State()
    cargo_type = State()
    car_type = State()
    cargo_weight = State()
    ask_phone = State()

class DriverRegistration(StatesGroup):
    ask_phone = State()
    ask_fullname = State()
    ask_car_model = State()
    custom_car = State()

class AdminTopUp(StatesGroup):
    choose_driver = State()
    custom_amount = State()

class ReceiptApproval(StatesGroup):
    custom_amount = State()

class Broadcast(StatesGroup):
    choose_group = State()
    message_text = State()

# --------------------------
# HELPERS
# --------------------------
def list_active_driver_ids() -> list:
    with closing(db()) as conn:
        rows = conn.execute("SELECT driver_id FROM drivers WHERE status='active'").fetchall()
        return [r["driver_id"] for r in rows]

async def push_new_order_to_drivers(order_row: sqlite3.Row):
    fee = order_row["commission"] or 0
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept:{order_row['id']}"),
                                               InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject:{order_row['id']}")]])
    text = (
        f"üì¢ <b>–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞!</b>\n\n"
        f"üÜî {order_row['id']} | {order_row['date']}\n"
        f"üìç {order_row['from_address']} ‚ûú {order_row['to_address']}\n"
        f"üì¶ {order_row['cargo_type']}\n"
        f"üöò {order_row['car_type']}\n"
        f"‚öñÔ∏è {order_row['cargo_weight']} –∫–≥\n"
        f"üíµ –ö–æ–º–∏—Å—Å–∏—è: <b>{fee}</b> —Å—û–º\n\n"
        f"–ë–∏—Ä–∏–Ω—á–∏ –±—û–ª–∏–± “õ–∞–±—É–ª “õ–∏–ª–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–≥–∞ –±–∏—Ä–∏–∫—Ç–∏—Ä–∏–ª–∞–¥–∏."
    )
    for did in list_active_driver_ids():
        try:
            await bot.send_message(did, text, reply_markup=kb)
        except Exception:
            pass

def format_order_row(r: sqlite3.Row) -> str:
    fee = r["commission"] if r["commission"] is not None else "‚Äî"
    driver_line = f"üöñ Haydovchi: {r['driver_id']}" if r["driver_id"] else "üöñ Haydovchi: ‚Äî"
    username = r["customer_username"] or "‚Äî"
    phone = r["customer_phone"] or "‚Äî"
    return (
        f"üÜî {r['id']} | {r['date']}\n"
        f"      {r['from_address']} ‚ûú {r['to_address']}\n"
        f"üì¶ {r['cargo_type']}\n"
        f"üöò {r['car_type']}\n"
        f"‚öñÔ∏è {r['cargo_weight']} –∫–≥\n"
        f"üìä –•–æ–ª–∞—Ç: {r['status']}\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {fee}\n"
        f"üë§ {username}\n"
        f"üìû {phone}\n"
        f"{driver_line}"
    )

async def top_up_balance_and_notify(driver_id: int, amount: int):
    with closing(db()) as conn:
        conn.execute("UPDATE drivers SET balance = COALESCE(balance,0) + ? WHERE driver_id=?", (amount, driver_id))
        conn.commit()
        new_bal = conn.execute("SELECT balance FROM drivers WHERE driver_id=?", (driver_id,)).fetchone()
        new_bal_value = int(new_bal["balance"]) if new_bal and new_bal["balance"] is not None else amount
    try:
        await bot.send_message(driver_id, f"üí≥ <b>Balansingiz to‚Äòldirildi!</b>\n\nSizga +<b>{amount}</b> —Å—û–º “õ—û—à–∏–ª–¥–∏ ‚úÖ\nüìä –ñ–æ—Ä–∏–π –±–∞–ª–∞–Ω—Å: <b>{new_bal_value}</b> —Å—û–º")
    except Exception:
        pass

# --------------------------
# START HANDLER
# --------------------------
@router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id in ADMIN_IDS:
        await message.answer("<b>üëë –ê–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b>\n\n–ê–¥–º–∏–Ω –º–µ–Ω—é–¥–∞–Ω –±–∏—Ä–æ—Ä –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=admin_menu_kb())
        return
    with closing(db()) as conn:
        driver = conn.execute("SELECT * FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
        customer = conn.execute("SELECT * FROM customers WHERE user_id=?", (message.from_user.id,)).fetchone()

    if driver:
        if driver["status"] == "blocked":
            await message.answer("‚ùó –°–∏–∑ “≥–æ–∑–∏—Ä—á–∞ –±–ª–æ–∫–ª–∞–Ω–≥–∞–Ω—Å–∏–∑. –ò–ª—Ç–∏–º–æ—Å –∞–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥.")
            return
        await message.answer("üëã –°–∞–ª–æ–º, “≥–∞–π–¥–æ–≤—á–∏!", reply_markup=driver_menu_kb())
        return

    if customer:
        await message.answer("üëã –°–∞–ª–æ–º!", reply_markup=customer_menu_kb())
        return

    await message.answer("üëã –°–∞–ª–æ–º! –ò–ª—Ç–∏–º–æ—Å, —Ä–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=role_kb())

# --------------------------
# ROLE CHOICES
# --------------------------
@router.message(F.text == "üë§ –ú–∏–∂–æ–∑")
async def role_customer(message: Message):
    with closing(db()) as conn:
        conn.execute("INSERT OR IGNORE INTO customers(user_id, username, phone, status) VALUES(?,?,?,?)",
                     (message.from_user.id, f"@{message.from_user.username}" if message.from_user.username else None, None, "active"))
        conn.commit()
    await message.answer("‚úÖ –°–∏–∑ –º–∏–∂–æ–∑ —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑!", reply_markup=customer_menu_kb())

@router.message(F.text == "üöñ “≤–∞–π–¥–æ–≤—á–∏")
async def role_driver(message: Message, state: FSMContext):
    with closing(db()) as conn:
        drv = conn.execute("SELECT status FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
    if drv and drv["status"] == "blocked":
        await message.answer("‚ùó –°–∏–∑ –±–ª–æ–∫–ª–∞–Ω–≥–∞–Ω—Å–∏–∑. –ê–¥–º–∏–Ω–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏–Ω–≥.")
        return
    await state.set_state(DriverRegistration.ask_phone)
    await message.answer("üì± –ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=phone_request_kb())

# --------------------------
# DRIVER REGISTRATION FLOW
# --------------------------
@router.message(DriverRegistration.ask_phone, F.contact)
async def driver_save_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    uname = message.from_user.username
    await state.update_data(phone=phone, username=f"@{uname}" if uname else None)
    await state.set_state(DriverRegistration.ask_fullname)
    await message.answer("üë§ –ò–ª—Ç–∏–º–æ—Å, –∏—Å–º –≤–∞ —Ñ–∞–º–∏–ª–∏—è–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")

@router.message(DriverRegistration.ask_fullname, F.text)
async def driver_save_fullname(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    kb = InlineKeyboardBuilder()
    kb.button(text="Labo", callback_data="car_Labo")
    kb.button(text="Bongo", callback_data="car_Bongo")
    kb.button(text="Isuzi", callback_data="car_Isuzi")
    kb.button(text="Gazel", callback_data="car_Gazel")
    kb.button(text="Boshqa", callback_data="car_other")
    kb.adjust(2)
    await state.set_state(DriverRegistration.ask_car_model)
    await message.answer("üöò –ú–∞—à–∏–Ω–∞ —Ä—É—Å—É–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=kb.as_markup())

@router.callback_query(DriverRegistration.ask_car_model, F.data.startswith("car_"))
async def driver_choose_car(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("_", 1)[1]
    if choice == "other":
        await callback.message.answer("‚úçÔ∏è –ò–ª–æ–∂–∏ –±–æ—Ä–∏—á–∞ —û–∑ –º–∞—à–∏–Ω–∞ —Ä—É—Å—É–º–∏–Ω–∏ —ë–∑–∏–Ω–≥:")
        await state.set_state(DriverRegistration.custom_car)
    else:
        data = await state.get_data()
        uname = data.get("username")
        phone = data.get("phone")
        full_name = data.get("full_name")
        with closing(db()) as conn:
            conn.execute("""
                INSERT INTO drivers(driver_id, username, phone, full_name, car_model, balance, status)
                VALUES(?,?,?,?,?,?,?)
                ON CONFLICT(driver_id) DO UPDATE SET
                    username=excluded.username,
                    phone=excluded.phone,
                    full_name=excluded.full_name,
                    car_model=excluded.car_model
            """, (callback.from_user.id, uname, phone, full_name, choice, 99000, "active"))
            conn.commit()
        for aid in ADMIN_IDS:
            try:
                await bot.send_message(aid, f"üö® –Ø–Ω–≥–∏ “≥–∞–π–¥–æ–≤—á–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏: @{uname or callback.from_user.id} | ID: {callback.from_user.id}\nüë§ {full_name}\nüöò {choice}")
            except Exception:
                pass
        await state.clear()
        await callback.message.answer(f"‚úÖ –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑!\nüë§ {full_name}\nüöò {choice}\nüí∞ Bonus: 99 000 —Å—û–º", reply_markup=driver_menu_kb())
    await callback.answer()

@router.message(DriverRegistration.custom_car, F.text)
async def driver_custom_car(message: Message, state: FSMContext):
    data = await state.get_data()
    car_model = message.text.strip()
    uname = data.get("username")
    phone = data.get("phone")
    full_name = data.get("full_name")
    with closing(db()) as conn:
        conn.execute("""
            INSERT INTO drivers(driver_id, username, phone, full_name, car_model, balance, status)
            VALUES(?,?,?,?,?,?,?)
            ON CONFLICT(driver_id) DO UPDATE SET
                username=excluded.username,
                phone=excluded.phone,
                full_name=excluded.full_name,
                car_model=excluded.car_model
        """, (message.from_user.id, uname, phone, full_name, car_model, 99000, "active"))
        conn.commit()
    for aid in ADMIN_IDS:
        try:
            await bot.send_message(aid, f"üö® –Ø–Ω–≥–∏ “≥–∞–π–¥–æ–≤—á–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏: @{uname or message.from_user.id} | ID: {message.from_user.id}\nüë§ {full_name}\nüöò {car_model}")
        except Exception:
            pass
    await state.clear()
    await message.answer(f"‚úÖ –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑!\nüë§ {full_name}\nüöò {car_model}\nüí∞ Bonus: 99 000 —Å—û–º", reply_markup=driver_menu_kb())

# --------------------------
# NEW ORDER FLOW (customer or driver)
# --------------------------
@router.message(F.text == "üìù –Ø–Ω–≥–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞")
async def new_order(message: Message, state: FSMContext):
    with closing(db()) as conn:
        drv = conn.execute("SELECT status FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
        cust = conn.execute("SELECT status FROM customers WHERE user_id=?", (message.from_user.id,)).fetchone()
    if drv and drv["status"] == "blocked":
        await message.answer("‚ùó –°–∏–∑ –±–ª–æ–∫–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏—Å–∏–∑. –ê–¥–º–∏–Ω–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏–Ω–≥.")
        return
    if cust and cust["status"] == "blocked":
        await message.answer("‚ùó –°–∏–∑ –±–ª–æ–∫–ª–∞–Ω–≥–∞–Ω—Å–∏–∑. –ê–¥–º–∏–Ω–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏–Ω–≥.")
        return
    creator_role = "driver" if drv else "customer"
    await state.update_data(creator_role=creator_role)
    await state.set_state(NewOrder.from_address)
    await message.answer("üìç “ö–∞–µ—Ä–¥–∞–Ω —é–∫ –æ–ª–∏–Ω–∞–¥–∏? –ú–∞–Ω–∑–∏–ª–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:", reply_markup=ReplyKeyboardRemove())

@router.message(NewOrder.from_address, F.text)
async def order_from(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 3:
        await message.answer("‚ùå –ú–∞–Ω–∑–∏–ª–Ω–∏ —Ç—û–ª–∏“õ—Ä–æ“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        return
    await state.update_data(from_address=text)
    await state.set_state(NewOrder.to_address)
    await message.answer("üìç “ö–∞–µ—Ä–≥–∞ —é–±–æ—Ä–∏–ª–∞–¥–∏? –ú–∞–Ω–∑–∏–ª–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")

@router.message(NewOrder.to_address, F.text)
async def order_to(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 3:
        await message.answer("‚ùå –ú–∞–Ω–∑–∏–ª–Ω–∏ —Ç—û–ª–∏“õ—Ä–æ“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        return
    await state.update_data(to_address=text)
    await state.set_state(NewOrder.cargo_type)
    await message.answer("üì¶ –Æ–∫ —Ç—É—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")

@router.message(NewOrder.cargo_type, F.text)
async def order_cargo(message: Message, state: FSMContext):
    text = message.text.strip()
    await state.update_data(cargo_type=text)
    await state.set_state(NewOrder.car_type)
    await message.answer("üöò “ö–∞–π—Å–∏ –º–∞—à–∏–Ω–∞ –∫–µ—Ä–∞–∫? –¢—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=car_type_kb())

@router.message(NewOrder.car_type, F.text)
async def order_car(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à":
        await state.clear()
        with closing(db()) as conn:
            drv = conn.execute("SELECT * FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
        await message.answer("‚ùå –ë—É—é—Ä—Ç–º–∞ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.", reply_markup=driver_menu_kb() if drv else customer_menu_kb())
        return
    if message.text not in ["üöê –õ–∞–±–æ", "üöõ –ë–æ–Ω–≥–æ", "üöö –ò—Å—É–∑–∏"]:
        await message.answer("‚ùå –ò–ª—Ç–∏–º–æ—Å, —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥.")
        return
    await state.update_data(car_type=message.text)
    await state.set_state(NewOrder.cargo_weight)
    await message.answer("‚öñÔ∏è –Æ–∫ –æ“ì–∏—Ä–ª–∏–≥–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–∫–≥):", reply_markup=ReplyKeyboardRemove())

@router.message(NewOrder.cargo_weight, F.text)
async def order_weight(message: Message, state: FSMContext):
    txt = message.text.strip().replace(",", ".")
    if not re.match(r"^\d+(\.\d+)?$", txt):
        await message.answer("‚ùå –§–∞“õ–∞—Ç —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: 150 —ë–∫–∏ 75.5).")
        return
    await state.update_data(cargo_weight=float(txt))
    await state.set_state(NewOrder.ask_phone)
    await message.answer("üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ —Ç—É–≥–º–∞–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥:", reply_markup=phone_request_kb())

@router.message(NewOrder.ask_phone)
async def order_phone(message: Message, state: FSMContext):
    phone = None
    if getattr(message, "contact", None):
        if not message.contact.user_id or message.contact.user_id == message.from_user.id:
            phone = message.contact.phone_number
    if not phone and message.text:
        t = message.text.strip()
        if re.match(r"^\+?\d[\d\s\-\(\)]{7,}$", t):
            phone = t
    if not phone:
        await message.answer("‚ùó –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —Ç—û“ì—Ä–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ ¬´üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à¬ª —Ç—É–≥–º–∞—Å–∏–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.")
        return

    data = await state.get_data()
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    uname = message.from_user.username
    customer_username = f"@{uname}" if uname else f"id:{message.from_user.id}"
    creator_role = data.get("creator_role", "customer")

    with closing(db()) as conn:
        conn.execute("""
            INSERT INTO orders(customer_id, from_address, to_address, cargo_type, car_type, cargo_weight, date, status, customer_username, customer_phone, creator_role)
            VALUES(?,?,?,?,?,?,?,?,?,?,?)
        """, (message.from_user.id, data["from_address"], data["to_address"], data["cargo_type"], data["car_type"], data["cargo_weight"], now, "pending_fee", customer_username, phone, creator_role))
        conn.commit()
        order_id = conn.execute("SELECT last_insert_rowid() AS id").fetchone()["id"]

        conn.execute("INSERT OR REPLACE INTO customers(user_id, username, phone, status) VALUES(?,?,?, COALESCE((SELECT status FROM customers WHERE user_id=?), 'active'))",
                     (message.from_user.id, customer_username, phone, message.from_user.id))
        conn.commit()

    await state.clear()
    await message.answer(f"‚úÖ –ë—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ #{order_id} “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!\n–ê–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω –∫–æ–º–∏—Å—Å–∏—è –±–µ–ª–≥–∏–ª–∞–Ω–∞–¥–∏.", reply_markup=driver_menu_kb() if creator_role=="driver" else customer_menu_kb())

    with closing(db()) as conn:
        order = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
    text_admin = (
        f"üÜï <b>–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞!</b>\n\n"
        f"üÜî {order['id']} | {order['date']}\n"
        f"üìç {order['from_address']} ‚ûú {order['to_address']}\n"
        f"üì¶ {order['cargo_type']}\n"
        f"üöò {order['car_type']}\n"
        f"‚öñÔ∏è {order['cargo_weight']} –∫–≥\n"
        f"üë§ {order['customer_username']}\n"
        f"üìû {order['customer_phone']}\n\n"
        f"–ö–æ–º–∏—Å—Å–∏—è–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"
    )
    for aid in ADMIN_IDS:
        try:
            await bot.send_message(aid, text_admin, reply_markup=commission_kb(order_id))
        except Exception:
            pass

# --------------------------
# ADMIN set commission
# --------------------------
@router.callback_query(F.data.startswith("setfee:"))
async def set_fee(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–ª–∞—Ä —É—á—É–Ω.", show_alert=True)
        return
    try:
        _, oid, fee = callback.data.split(":")
        order_id = int(oid); fee = int(fee)
    except Exception:
        await callback.answer("–ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç.", show_alert=True)
        return
    with closing(db()) as conn:
        row = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
        if not row:
            await callback.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
            return
        if row["status"] != "pending_fee":
            await callback.answer("–ö–æ–º–∏—Å—Å–∏—è –∞–ª–ª–∞“õ–∞—á–æ–Ω –±–µ–ª–≥–∏–ª–∞–Ω–≥–∞–Ω.", show_alert=True)
            return
        conn.execute("UPDATE orders SET commission=?, status='open' WHERE id=?", (fee, order_id))
        conn.commit()
    await callback.answer("–ö–æ–º–∏—Å—Å–∏—è —û—Ä–Ω–∞—Ç–∏–ª–¥–∏ –≤–∞ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    with closing(db()) as conn:
        order = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
    await push_new_order_to_drivers(order)

# --------------------------
# DRIVER: free orders & accept/reject
# --------------------------
@router.message(F.text == "üìú –ë—û—à –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")
async def free_orders(message: Message):
    with closing(db()) as conn:
        d = conn.execute("SELECT status FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
    if not d:
        await message.answer("‚ùå “≤–∞–π–¥–æ–≤—á–∏ —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥.", reply_markup=role_kb())
        return
    if d["status"] == "blocked":
        await message.answer("‚ùó –°–∏–∑ –±–ª–æ–∫–ª–∞–Ω–≥–∞–Ω—Å–∏–∑. –ê–¥–º–∏–Ω–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏–Ω–≥.")
        return
    with closing(db()) as conn:
        rows = conn.execute("SELECT * FROM orders WHERE status='open' ORDER BY id DESC LIMIT 20").fetchall()
    if not rows:
        await message.answer("üì≠ “≤–æ–∑–∏—Ä—á–∞ –±—û—à –±—É—é—Ä—Ç–º–∞ –π—û“õ.")
        return
    for r in rows:
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept:{r['id']}"),
            InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject:{r['id']}")
        ]])
        await message.answer(format_order_row(r), reply_markup=kb)

@router.callback_query(F.data.startswith("accept:"))
async def accept_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with closing(db()) as conn:
        d = conn.execute("SELECT balance, phone, username, status FROM drivers WHERE driver_id=?", (callback.from_user.id,)).fetchone()
        order = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
    if not d:
        await callback.answer("‚ùå “≤–∞–π–¥–æ–≤—á–∏ —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥.", show_alert=True); return
    if d["status"] == "blocked":
        await callback.answer("‚ùó –°–∏–∑ –±–ª–æ–∫–ª–∞–Ω–≥–∞–Ω—Å–∏–∑.", show_alert=True); return
    if not order or order["status"] != "open":
        await callback.answer("‚ùå –ë—É—é—Ä—Ç–º–∞ “õ–æ–ª–º–∞–≥–∞–Ω —ë–∫–∏ –æ–ª–≥–∞–Ω.", show_alert=True); return

    fee = int(order["commission"] or 0)
    if (d["balance"] or 0) < fee:
        await callback.answer(f"‚ùå –ë–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑ –µ—Ç–∞—Ä–ª–∏ —ç–º–∞—Å. –ö–µ—Ä–∞–∫: {fee} —Å—û–º.", show_alert=True); return

    # buyurtmani haydovchiga biriktirish
    with closing(db()) as conn:
        row = conn.execute("SELECT status FROM orders WHERE id=?", (order_id,)).fetchone()
        if not row or row["status"] != "open":
            await callback.answer("‚ùå –ö–µ—á–∏–∫–¥–∏–Ω–≥–∏–∑, –±—É—é—Ä—Ç–º–∞ –±–∞–Ω–¥ –±—û–ª–¥–∏.", show_alert=True); return
        conn.execute("UPDATE orders SET status='taken', driver_id=? WHERE id=? AND status='open'", (callback.from_user.id, order_id))
        conn.execute("UPDATE drivers SET balance = balance - ? WHERE driver_id=?", (fee, callback.from_user.id))
        conn.commit()

    await callback.answer("‚úÖ –ë—É—é—Ä—Ç–º–∞ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # buyurtmachiga habar
    try:
        await bot.send_message(
            order["customer_id"],
            f"‚úÖ –°–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ #{order_id} “≥–∞–π–¥–æ–≤—á–∏ —Ç–æ–º–æ–Ω–∏–¥–∞–Ω “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!\nüë§ {d['username'] or callback.from_user.id}\nüìû {d['phone'] or '‚Äî'}"
        )
    except Exception:
        pass

    # haydovchiga buyurtma tafsilotlari va yakunlash tugmasi
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöö Buyurtmani yakunlash", callback_data=f"complete:{order_id}")]
    ])
    text_driver = (
        f"üÜï –°–∏–∑–≥–∞ –±—É—é—Ä—Ç–º–∞ –±–∏—Ä–∏–∫—Ç–∏—Ä–∏–ª–¥–∏!\n\n"
        f"üìç {order['from_address']} ‚ûú {order['to_address']}\n"
        f"üì¶ {order['cargo_type']}\n"
        f"‚öñÔ∏è {order['cargo_weight']} –∫–≥\n"
        f"üë§ Buyurtmachi: {order['customer_username'] or '‚Äî'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['customer_phone'] or '‚Äî'}"
    )
    await bot.send_message(callback.from_user.id, text_driver, reply_markup=kb)


@router.callback_query(F.data.startswith("reject:"))
async def reject_order(callback: CallbackQuery):
    await callback.answer("‚ùå –°–∏–∑ —Ä–∞–¥ —ç—Ç–¥–∏–Ω–≥–∏–∑.")
# --------------------------
# COMPLETE ORDER (driver presses complete inline)
# --------------------------
@router.callback_query(F.data.startswith("complete:"))
async def complete_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with closing(db()) as conn:
        order = conn.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
        if not order:
            await callback.answer("‚ùå –ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True); return
        if order["driver_id"] != callback.from_user.id:
            await callback.answer("‚ùå –§–∞“õ–∞—Ç —É—à–±—É “≥–∞–π–¥–æ–≤—á–∏ —è–∫—É–Ω–ª–∞–π–¥–∏.", show_alert=True); return
        if order["status"] != "taken":
            await callback.answer("‚ùå “≤–æ–ª–∞—Ç –º–æ—Å —ç–º–∞—Å.", show_alert=True); return
        conn.execute("UPDATE orders SET status='done' WHERE id=?", (order_id,))
        conn.commit()
    await callback.answer("‚úÖ –ë—É—é—Ä—Ç–º–∞ —è–∫—É–Ω–ª–∞–Ω–¥–∏!", show_alert=True)
    try:
        await bot.send_message(order["customer_id"], f"üöö –°–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ #{order_id} —è–∫—É–Ω–ª–∞–Ω–¥–∏.")
    except Exception:
        pass
# --------------------------
# BALANCE & RECEIPTS
# --------------------------
# --- –ü—Ä–æ—Ñ–∏–ª—å ---
@router.message(F.text == "üí≥ –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à (–∫–≤–∏—Ç–∞–Ω—Å–∏—è)")
async def send_receipt_instructions(message: Message):
    with closing(db()) as conn:
        drv = conn.execute(
            "SELECT driver_id FROM drivers WHERE driver_id=?",
            (message.from_user.id,)
        ).fetchone()

    if not drv and message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùó –§–∞“õ–∞—Ç “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –≤–∞ –∞–¥–º–∏–Ω–ª–∞—Ä —É—á—É–Ω.")
        return

    if drv:
        text = (
            "üí≥ <b>–ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à –±—û–π–∏—á–∞ –∫—û—Ä—Å–∞—Ç–º–∞–ª–∞—Ä</b>\n\n"
            "üè¶ –ë–∞–Ω–∫: <b>Kapitalbank</b>\n"
            "üí≥ –ö–∞—Ä—Ç–∞ —Ä–∞“õ–∞–º–∏: <code>8600 1234 5678 9012</code>\n"
            "üë§ –≠–≥–∞—Å–∏: <b>–ò—Å–ª–æ–º–æ–≤ –ò—Å–ª–æ–º –ò—Å–ª–æ–º–æ–≤–∏—á</b>\n\n"
            f"üìå –¢—û–ª–æ–≤ “õ–∏–ª–∞—ë—Ç–≥–∞–Ω–¥–∞ –∏–∑–æ“≥–≥–∞ —û–∑ <b>Telegram ID</b> —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥:\n<code>{message.from_user.id}</code>\n\n"
            "‚úÖ –¢—û–ª–æ–≤–Ω–∏ –∞–º–∞–ª–≥–∞ –æ—à–∏—Ä–≥–∞–Ω–¥–∞–Ω –∫–µ–π–∏–Ω, –∫–≤–∏—Ç–∞–Ω—Ü–∏—è (—Å–∫—Ä–∏–Ω—à–æ—Ç)–Ω–∏ —à—É –µ—Ä–≥–∞ —é–±–æ—Ä–∏–Ω–≥."
        )
        await message.answer(text, parse_mode="HTML")
    else:
        await message.answer("üîß –ê–¥–º–∏–Ω —É—á—É–Ω: –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à –º–µ–Ω—é—Å–∏.")

@router.message(F.photo)
async def handle_receipt_and_forward(message: Message):
    with closing(db()) as conn:
        drv = conn.execute("SELECT driver_id, username FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
    if not drv:
        return
    file_id = message.photo[-1].file_id
    with closing(db()) as conn:
        conn.execute("INSERT INTO receipts(driver_id, file_id, status) VALUES(?,?, 'pending')", (message.from_user.id, file_id))
        conn.commit()
        receipt_id = conn.execute("SELECT last_insert_rowid() AS id").fetchone()["id"]
    caption = (f"üßæ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è #{receipt_id}\n"
               f"üßë‚Äç‚úàÔ∏è Haydovchi: @{drv['username'] or message.from_user.id}\n"
               f"üìû ID: {message.from_user.id}\n\n"
               "“ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥ —ë–∫–∏ —Ä–∞–¥ —ç—Ç–∏–Ω–≥.")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="+5 000", callback_data=f"approve_receipt:{receipt_id}:5000"),
         InlineKeyboardButton(text="+10 000", callback_data=f"approve_receipt:{receipt_id}:10000"),
         InlineKeyboardButton(text="+15 000", callback_data=f"approve_receipt:{receipt_id}:15000")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ë–æ—à“õ–∞ —Å—É–º–º–∞", callback_data=f"approve_receipt_other:{receipt_id}"),
         InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject_receipt:{receipt_id}")]
    ])
    for aid in ADMIN_IDS:
        try:
            await bot.send_photo(aid, file_id, caption=caption, reply_markup=kb)
        except Exception:
            pass
    await message.answer("üì© –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏. –¢–µ–∑ –æ—Ä–∞–¥–∞ —Ç–µ–∫—à–∏—Ä–∏–ª–∞–¥–∏.")

def get_driver_info(user_id):
    from contextlib import closing
    # Bu yerda sening db() funksiyangizni ishlatasiz
    with closing(db()) as conn:
        drv = conn.execute(
            "SELECT full_name, car_model, phone, username, balance FROM drivers WHERE driver_id=?",
            (user_id,)
        ).fetchone()
        return drv

@router.callback_query(F.data.startswith("approve_receipt:"))
async def approve_receipt_fixed(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–ª–∞—Ä —É—á—É–Ω.", show_alert=True); return
    try:
        _, receipt_id_s, amount_s = callback.data.split(":")
        receipt_id = int(receipt_id_s); amount = int(amount_s)
    except Exception:
        await callback.answer("–ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç.", show_alert=True); return
    with closing(db()) as conn:
        rec = conn.execute("SELECT * FROM receipts WHERE id=?", (receipt_id,)).fetchone()
        if not rec:
            await callback.answer("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True); return
        if rec["status"] != "pending":
            await callback.answer("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∞–ª–ª–∞“õ–∞—á–æ–Ω –∫—û—Ä–∏–± —á–∏“õ–∏–ª–≥–∞–Ω.", show_alert=True); return
        conn.execute("UPDATE receipts SET status='approved' WHERE id=?", (receipt_id,))
        conn.execute("UPDATE drivers SET balance = COALESCE(balance,0) + ? WHERE driver_id=?", (amount, rec["driver_id"]))
        conn.commit()
    try:
        await bot.send_message(rec["driver_id"], f"‚úÖ –°–∏–∑ —é–±–æ—Ä–≥–∞–Ω –∫–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏. –ë–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑–≥–∞ +{amount} —Å—û–º “õ—û—à–∏–ª–¥–∏.")
    except Exception:
        pass
    await callback.answer(f"‚úÖ {amount} —Å—û–º ‚Äî “õ—û—à–∏–ª–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@router.callback_query(F.data.startswith("approve_receipt_other:"))
async def approve_receipt_other(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–ª–∞—Ä —É—á—É–Ω.", show_alert=True); return
    try:
        _, receipt_id_s = callback.data.split(":")
        receipt_id = int(receipt_id_s)
    except Exception:
        await callback.answer("–ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç.", show_alert=True); return
    await state.update_data(receipt_id=receipt_id)
    await state.set_state(ReceiptApproval.custom_amount)
    await callback.message.answer("‚úçÔ∏è –òltimos, “õ—û—à–∏–ª–∞–¥–∏–≥–∞–Ω —Å—É–º–º–∞–Ω–∏ —Å—û–º–¥–∞ (–±—É—Ç—É–Ω —Ä–∞“õ–∞–º) –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await callback.answer()

@router.message(ReceiptApproval.custom_amount, F.text)
async def receipt_custom_amount_input(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    txt = message.text.strip().replace(" ", "")
    if not txt.isdigit():
        await message.answer("‚ùó –ò–ª–æ–∂–∏ –±–æ—Ä–∏—á–∞ —Ñ–∞“õ–∞—Ç –±—É—Ç—É–Ω —Å–æ–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: 75000).")
        return
    amount = int(txt)
    data = await state.get_data()
    receipt_id = data.get("receipt_id")
    if receipt_id is None:
        await message.answer("–ò—á–∫–∏ —Ö–∞—Ç–æ–ª–∏–∫ ‚Äî –∫–≤–∏—Ç–∞–Ω—Å–∏—è ID —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        await state.clear()
        return
    with closing(db()) as conn:
        rec = conn.execute("SELECT * FROM receipts WHERE id=?", (receipt_id,)).fetchone()
        if not rec:
            await message.answer("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
            await state.clear()
            return
        if rec["status"] != "pending":
            await message.answer("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∞–ª–ª–∞“õ–∞—á–æ–Ω –∫—û—Ä–∏–± —á–∏“õ–∏–ª–≥–∞–Ω.")
            await state.clear()
            return
        conn.execute("UPDATE receipts SET status='approved' WHERE id=?", (receipt_id,))
        conn.execute("UPDATE drivers SET balance = COALESCE(balance,0) + ? WHERE driver_id=?", (amount, rec["driver_id"]))
        conn.commit()
    try:
        await bot.send_message(rec["driver_id"], f"‚úÖ –°–∏–∑ —é–±–æ—Ä–≥–∞–Ω –∫–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏. –ë–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑–≥–∞ +{amount} —Å—û–º “õ—û—à–∏–ª–¥–∏.")
    except Exception:
        pass
    await message.answer(f"‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏ –≤–∞ {amount} —Å—û–º “õ—û—à–∏–ª–¥–∏.")
    await state.clear()

@router.callback_query(F.data.startswith("reject_receipt:"))
async def reject_receipt_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–ª–∞—Ä —É—á—É–Ω.", show_alert=True); return
    try:
        _, receipt_id_s = callback.data.split(":")
        receipt_id = int(receipt_id_s)
    except Exception:
        await callback.answer("–ù–æ—Ç—û“ì—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç.", show_alert=True); return
    with closing(db()) as conn:
        rec = conn.execute("SELECT * FROM receipts WHERE id=?", (receipt_id,)).fetchone()
        if not rec:
            await callback.answer("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True); return
        if rec["status"] != "pending":
            await callback.answer("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∞–ª–ª–∞“õ–∞—á–æ–Ω –∫—û—Ä–∏–± —á–∏“õ–∏–ª–≥–∞–Ω.", show_alert=True); return
        conn.execute("UPDATE receipts SET status='rejected' WHERE id=?", (receipt_id,))
        conn.commit()
    try:
        await bot.send_message(rec["driver_id"], "‚ùå –°–∏–∑ —é–±–æ—Ä–≥–∞–Ω –∫–≤–∏—Ç–∞–Ω—Ü–∏—è —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏. –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥.")
    except Exception:
        pass
    await callback.answer("‚ùå –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

# --------------------------
# ADMIN: lists & block/unblock
# --------------------------
@router.message(F.text == "üìä –ë–∞—Ä—á–∞ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")
async def all_orders(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with closing(db()) as conn:
        rows = conn.execute("SELECT * FROM orders ORDER BY id DESC LIMIT 50").fetchall()
    if not rows:
        await message.answer("üì≠ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä –π—û“õ.")
        return
    for r in rows:
        await message.answer(format_order_row(r))

@router.message(F.text == "üöñ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä")
async def list_drivers_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with closing(db()) as conn:
        rows = conn.execute("SELECT * FROM drivers ORDER BY driver_id DESC").fetchall()
    if not rows:
        await message.answer("üì≠ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return
    for r in rows:
        status = r["status"] or "active"
        text = f"üÜî {r['driver_id']} | {r['username'] or '‚Äî'} | üìû {r['phone'] or '‚Äî'} | üí∞ {int(r['balance'] or 0)} —Å—û–º | –°—Ç–∞—Ç—É—Å: <b>{status}</b>\nüë§ {r['full_name'] or '‚Äî'} | üöò {r['car_model'] or '‚Äî'}"
        if status == "active":
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîí –ë–ª–æ–∫–ª–∞—à", callback_data=f"drv_block:{r['driver_id']}")]])
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ë–ª–æ–∫–¥–∞–Ω —á–∏“õ–∞—Ä–∏—à", callback_data=f"drv_unblock:{r['driver_id']}")]])
        await message.answer(text, reply_markup=kb)

@router.callback_query(F.data.startswith("drv_block:"))
async def drv_block(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return
    driver_id = int(callback.data.split(":")[1])
    with closing(db()) as conn:
        conn.execute("UPDATE drivers SET status='blocked' WHERE driver_id=?", (driver_id,))
        conn.commit()
    try:
        await bot.send_message(driver_id, "üö´ –°–∏–∑ –∞–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω –±–ª–æ–∫–ª–∞–Ω–¥–∏–Ω–≥–∏–∑. –ò–ª—Ç–∏–º–æ—Å –∞–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥.")
    except Exception:
        pass
    await callback.answer(f"üîí {driver_id} –±–ª–æ–∫–ª–∞–Ω–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@router.callback_query(F.data.startswith("drv_unblock:"))
async def drv_unblock(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return
    driver_id = int(callback.data.split(":")[1])
    with closing(db()) as conn:
        conn.execute("UPDATE drivers SET status='active' WHERE driver_id=?", (driver_id,))
        conn.commit()
    try:
        await bot.send_message(driver_id, "‚úÖ –°–∏–∑ –±–ª–æ–∫–¥–∞–Ω —á–∏“õ–∞—Ä–∏–ª–¥–∏–Ω–≥–∏–∑. –ë–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.")
    except Exception:
        pass
    await callback.answer(f"‚úÖ {driver_id} –±–ª–æ–∫–¥–∞–Ω —á–∏“õ–∞—Ä–∏–ª–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@router.message(F.text == "üë• –ú–∏–∂–æ–∑–ª–∞—Ä")
async def list_customers_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with closing(db()) as conn:
        rows = conn.execute("SELECT * FROM customers ORDER BY user_id DESC").fetchall()
    if not rows:
        await message.answer("üì≠ –ú–∏–∂–æ–∑–ª–∞—Ä –π—û“õ.")
        return
    for r in rows:
        status = r["status"] or "active"
        text = f"üÜî {r['user_id']} | {r['username'] or '‚Äî'} | üìû {r['phone'] or '‚Äî'} | –°—Ç–∞—Ç—É—Å: <b>{status}</b>"
        if status == "active":
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîí –ë–ª–æ–∫–ª–∞—à", callback_data=f"cust_block:{r['user_id']}")]])
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ë–ª–æ–∫–¥–∞–Ω —á–∏“õ–∞—Ä–∏—à", callback_data=f"cust_unblock:{r['user_id']}")]])
        await message.answer(text, reply_markup=kb)

@router.callback_query(F.data.startswith("cust_block:"))
async def cust_block(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return
    user_id = int(callback.data.split(":")[1])
    with closing(db()) as conn:
        conn.execute("UPDATE customers SET status='blocked' WHERE user_id=?", (user_id,))
        conn.commit()
    try:
        await bot.send_message(user_id, "üö´ –°–∏–∑ –∞–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω –±–ª–æ–∫–ª–∞–Ω–¥–∏–Ω–≥–∏–∑. –ò–ª—Ç–∏–º–æ—Å –∞–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥.")
    except Exception:
        pass
    await callback.answer("üîí –ú–∏–∂–æ–∑ –±–ª–æ–∫–ª–∞–Ω–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@router.callback_query(F.data.startswith("cust_unblock:"))
async def cust_unblock(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return
    user_id = int(callback.data.split(":")[1])
    with closing(db()) as conn:
        conn.execute("UPDATE customers SET status='active' WHERE user_id=?", (user_id,))
        conn.commit()
    try:
        await bot.send_message(user_id, "‚úÖ –°–∏–∑ –±–ª–æ–∫–¥–∞–Ω —á–∏“õ–∞—Ä–∏–ª–¥–∏–Ω–≥–∏–∑. –ë–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.")
    except Exception:
        pass
    await callback.answer("‚úÖ –ú–∏–∂–æ–∑ –±–ª–æ–∫–¥–∞–Ω —á–∏“õ–∞—Ä–∏–ª–¥–∏.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

# --------------------------
# ADMIN: BROADCAST
# --------------------------
@router.message(F.text == "üì¢ –•–∞–±–∞—Ä —é–±–æ—Ä–∏—à")
async def broadcast_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöñ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–≥–∞", callback_data="broadcast_drivers")],
        [InlineKeyboardButton(text="üë• –ú–∏–∂–æ–∑–ª–∞—Ä–≥–∞", callback_data="broadcast_customers")],
        [InlineKeyboardButton(text="üåç “≤–∞–º–º–∞—Å–∏–≥–∞", callback_data="broadcast_all")]
    ])
    await state.set_state(Broadcast.choose_group)
    await message.answer("üì¢ –ö–∏–º–ª–∞—Ä–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=kb)

@router.callback_query(Broadcast.choose_group, F.data.startswith("broadcast_"))
async def choose_broadcast_group(callback: CallbackQuery, state: FSMContext):
    group = callback.data.replace("broadcast_", "")
    await state.update_data(group=group)
    await state.set_state(Broadcast.message_text)
    await callback.message.answer("‚úçÔ∏è –Æ–±–æ—Ä–∏–ª–∞–¥–∏–≥–∞–Ω —Ö–∞–±–∞—Ä –º–∞—Ç–Ω–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await callback.answer()

@router.message(Broadcast.message_text, F.text)
async def send_broadcast(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    data = await state.get_data()
    group = data.get("group")
    text = message.text
    await state.clear()

    with closing(db()) as conn:
        drivers = conn.execute("SELECT driver_id FROM drivers").fetchall()
        customers = conn.execute("SELECT user_id FROM customers").fetchall()

    targets = []
    if group == "drivers":
        targets = [r["driver_id"] for r in drivers]
    elif group == "customers":
        targets = [r["user_id"] for r in customers]
    else:
        targets = [r["driver_id"] for r in drivers] + [r["user_id"] for r in customers]

    sent = 0
    failed = 0
    for uid in targets:
        try:
            await bot.send_message(uid, f"üì¢ <b>–ê–¥–º–∏–Ω —Ö–∞–±–∞—Ä:</b>\n\n{text}")
            sent += 1
            await asyncio.sleep(0.03)
        except Exception:
            failed += 1
    await message.answer(f"‚úÖ –•–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏.\nüì® –ñ–∞–º–∏: {sent} —Ç–∞\n‚ùå –Æ–±–æ—Ä–∏–ª–º–∞–¥–∏: {failed} —Ç–∞", reply_markup=admin_menu_kb())

# --------------------------
# ADMIN: BALANCE TOPUP (choose driver -> amount)
# --------------------------
@router.message(F.text == "üíµ –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à")
async def admin_topup_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–ª–∞—Ä —É—á—É–Ω")
        return

    with closing(db()) as conn:
        rows = conn.execute("SELECT driver_id, username FROM drivers ORDER BY driver_id DESC").fetchall()

    if not rows:
        await message.answer("üì≠ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{r['username'] or r['driver_id']}", callback_data=f"adm_topup_driver:{r['driver_id']}")] for r in rows
    ])

    await state.set_state(AdminTopUp.choose_driver)
    await message.answer("üë§ “ö–∞–π—Å–∏ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ –±–∞–ª–∞–Ω—Å “õ—û—à–∞—Å–∏–∑? –¢–∞–Ω–ª–∞–Ω–≥:", reply_markup=kb)

@router.callback_query(F.data.startswith("adm_topup_driver:"))
async def adm_topup_driver_chosen(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return

    driver_id = int(callback.data.split(":", 1)[1])
    await state.update_data(driver_id=driver_id)

    await callback.message.answer("üíµ –ú–∏“õ–¥–æ—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ —ë–∫–∏ ¬´‚úçÔ∏è –ë–æ—à“õ–∞ —Å—É–º–º–∞¬ª–Ω–∏ —Ç–∞–Ω–ª–∞–± —Å—É–º–º–∞–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:", reply_markup=topup_amount_kb())
    await state.set_state(AdminTopUp.custom_amount)
    await callback.answer()

@router.callback_query(F.data.startswith("adm_topup_amt:"))
async def adm_topup_amount_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer(); return

    choice = callback.data.split(":", 1)[1]
    data = await state.get_data()
    driver_id = data.get("driver_id")
    if driver_id is None:
        await callback.answer("–ò—á–∫–∏ —Ö–∞—Ç–æ–ª–∏–∫."); return

    if choice == "other":
        await callback.message.answer("‚úçÔ∏è –°—É–º–º–∞–Ω–∏ –±—É—Ç—É–Ω —Ä–∞“õ–∞–º–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (—Å—û–º):")
        await state.set_state(AdminTopUp.custom_amount)
        await callback.answer()
        return

    amount = int(choice)
    with closing(db()) as conn:
        conn.execute("UPDATE drivers SET balance = COALESCE(balance,0) + ? WHERE driver_id=?", (amount, driver_id))
        conn.commit()

    await callback.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å {amount} —Å—û–º “õ—û—à–∏–ª–¥–∏.", show_alert=True)
    try:
        await bot.send_message(driver_id, f"üí≥ –ë–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑–≥–∞ +{amount} —Å—û–º “õ—û—à–∏–ª–¥–∏ (–∞–¥–º–∏–Ω).")
    except Exception:
        pass
    await state.clear()

@router.message(AdminTopUp.custom_amount, F.text)
async def adm_topup_custom_amount(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    txt = message.text.strip().replace(" ", "")
    if not txt.isdigit():
        await message.answer("‚ùó –§–∞“õ–∞—Ç –±—É—Ç—É–Ω —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: 75000).")
        return
    amount = int(txt)
    data = await state.get_data()
    driver_id = data.get("driver_id")
    if driver_id is None:
        await message.answer("–ò—á–∫–∏ —Ö–∞—Ç–æ–ª–∏–∫ ‚Äî driver_id —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        await state.clear()
        return

    with closing(db()) as conn:
        conn.execute("UPDATE drivers SET balance = COALESCE(balance,0) + ? WHERE driver_id=?", (amount, driver_id))
        conn.commit()

    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å {driver_id} —É—á—É–Ω +{amount} —Å—û–º “õ—û—à–∏–ª–¥–∏.", reply_markup=admin_menu_kb())
    try:
        await bot.send_message(driver_id, f"üí≥ –ê–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω –±–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑–≥–∞ +{amount} —Å—û–º “õ—û—à–∏–ª–¥–∏.")
    except Exception:
        pass
    await state.clear()

# --------------------------
# CONTACT ADMIN (inline buttons -> open telegram / call)
# --------------------------
@router.message(F.text == "üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")
async def contact_admin(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ Admin 1", url="https://t.me/zaaaza13")],
        [InlineKeyboardButton(text="üë§ Mirzayev Pro", url="https://t.me/dezard7177")],
        [InlineKeyboardButton(text="üìû +998330131992", url="tel:+998330131992")],
        [InlineKeyboardButton(text="üìû +998885131111", url="tel:+998885131111")]
    ])
    await message.answer("üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=kb)

# --------------------------
# HOME
# --------------------------
@router.message(F.text == "üè† –ë–æ—à –º–µ–Ω—é")
async def go_home(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üëë –ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=admin_menu_kb()); return
    with closing(db()) as conn:
        drv = conn.execute("SELECT * FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()
    if drv:
        await message.answer("üëã –°–∞–ª–æ–º, “≥–∞–π–¥–æ–≤—á–∏!", reply_markup=driver_menu_kb())
    else:
        await message.answer("üëã –°–∞–ª–æ–º!", reply_markup=customer_menu_kb())

@router.message(F.text == "üìù –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_id = message.from_user.id
    with db() as conn:
        cur = conn.cursor()

        # Haydovchi profil
        cur.execute("SELECT * FROM drivers WHERE driver_id=?", (user_id,))
        driver = cur.fetchone()
        if driver:
            text = (
                f"üë§ <b>“≤–∞–π–¥–æ–≤—á–∏ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
                f"üÜî ID: <code>{driver['driver_id']}</code>\n"
                f"üë§ –ò—Å–º: {driver['full_name'] or '‚Äî'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver['phone'] or '‚Äî'}\n"
                f"üöó –ú–∞—à–∏–Ω–∞: {driver['car_model'] or '‚Äî'}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: {driver['balance'] or 0} —Å—û–º\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {driver['status'] or '‚Äî'}\n"
            )
            await message.answer(text, reply_markup=driver_menu_kb())
            return

        # Mijoz profil
        cur.execute("SELECT * FROM customers WHERE user_id=?", (user_id,))
        customer = cur.fetchone()
        if customer:
            text = (
                f"üë§ <b>–ú–∏–∂–æ–∑ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
                f"üÜî ID: <code>{customer['user_id']}</code>\n"
                f"üë§ –ò—Å–º: {customer['full_name'] or '‚Äî'}\n"
                f"üë§ Username: @{message.from_user.username or '-'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer['phone'] or '‚Äî'}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {customer['status'] or '‚Äî'}\n"
            )
            await message.answer(text, reply_markup=customer_menu_kb())
            return

    await message.answer("‚ùå –°–∏–∑ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑!", reply_markup=role_kb())# --------------------------
# START POLLING
# --------------------------
async def main():
    init_db()
    print("üöÄ Bot –∏—à–≥–∞ —Ç—É—à–¥–∏...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


# --- –ü—Ä–æ—Ñ–∏–ª—å ---
