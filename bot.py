# -*- coding: utf-8 -*-
# Namangan Cargo Bot ‚Äî aiogram 3.22.0
# –†–æ–ª–ª–∞—Ä: –ú–∏–∂–æ–∑, “≤–∞–π–¥–æ–≤—á–∏, –ê–¥–º–∏–Ω
# –ë–∞–∑–∞: SQLite

import os
import asyncio
import sqlite3
import re
from contextlib import closing
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# =======================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =======================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN —Ç–æ–ø–∏–ª–º–∞–¥–∏! Railway ‚Üí Variables'–≥–∞ “õ—û—à–∏–Ω–≥.")

# –ê–¥–º–∏–Ω–ª–∞—Ä (–∫–µ—Ä—ç–∫–ª–∏ id-–ª–∞—Ä–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∞–¥–∏)
ADMIN_IDS = {1262207928, 555555555}

DB_FILE = "cargo.db"

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# =======================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =======================
def db():
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def _column_exists(conn, table: str, col: str) -> bool:
    cols = conn.execute(f"PRAGMA table_info({table})").fetchall()
    return any(c["name"] == col for c in cols)

def init_db():
    with closing(db()) as conn, conn:
        cur = conn.cursor()
        # orders
        cur.execute("""
        CREATE TABLE IF NOT EXISTS orders(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER,
            from_address TEXT,
            to_address TEXT,
            cargo_type TEXT,
            car_type TEXT,
            cargo_weight REAL,
            date TEXT,
            status TEXT CHECK(status IN ('pending_fee','open','taken','done')) DEFAULT 'pending_fee',
            driver_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            customer_username TEXT,
            customer_phone TEXT,
            commission INTEGER
        )""")
        # ensure columns exist (–Ω–∞ —Å–ª—É—á–∞–π –º–∏–≥—Ä–∞—Ü–∏–π)
        for col, coldef in [
            ("commission", "INTEGER"),
            ("status", "TEXT DEFAULT 'pending_fee'"),
            ("customer_phone", "TEXT"),
            ("customer_username", "TEXT"),
            ("car_type", "TEXT"),
        ]:
            if not _column_exists(conn, "orders", col):
                conn.execute(f"ALTER TABLE orders ADD COLUMN {col} {coldef}")

        # drivers
        cur.execute("""
        CREATE TABLE IF NOT EXISTS drivers(
            driver_id INTEGER PRIMARY KEY,
            username TEXT,
            phone TEXT,
            balance REAL DEFAULT 0
        )""")
        if not _column_exists(conn, "drivers", "balance"):
            conn.execute("ALTER TABLE drivers ADD COLUMN balance REAL DEFAULT 0")

# =======================
# –ö–õ–ê–í–ò–ê–¢–£–†–ê–õ–ê–†
# =======================
def role_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöñ “≤–∞–π–¥–æ–≤—á–∏"), KeyboardButton(text="üë§ –ú–∏–∂–æ–∑")]
        ],
        resize_keyboard=True
    )

def car_type_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöê –õ–∞–±–æ"), KeyboardButton(text="üöõ –ë–æ–Ω–≥–æ")],
            [KeyboardButton(text="üöö –ò—Å—É–∑–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à")]
        ],
        resize_keyboard=True
    )

def customer_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –Ø–Ω–≥–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞")]
        ],
        resize_keyboard=True
    )

def driver_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ë—û—à –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")]
        ],
        resize_keyboard=True
    )

def admin_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ë–∞—Ä—á–∞ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä")],
            [KeyboardButton(text="üöñ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä")],
            [KeyboardButton(text="üíµ –ë–∞–ª–∞–Ω—Å —Ç—û–ª–¥–∏—Ä–∏—à")]
        ],
        resize_keyboard=True
    )

def phone_request_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à", request_contact=True)]],
        resize_keyboard=True
    )

def topup_amount_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5 000", callback_data="adm_topup_amt:5000"),
         InlineKeyboardButton(text="10 000", callback_data="adm_topup_amt:10000"),
         InlineKeyboardButton(text="15 000", callback_data="adm_topup_amt:15000")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ë–æ—à“õ–∞ —Å—É–º–º–∞", callback_data="adm_topup_amt:other")]
    ])

def commission_kb(order_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5 000", callback_data=f"setfee:{order_id}:5000"),
         InlineKeyboardButton(text="10 000", callback_data=f"setfee:{order_id}:10000"),
         InlineKeyboardButton(text="15 000", callback_data=f"setfee:{order_id}:15000")]
    ])

# =======================
# FSM
# =======================
class NewOrder(StatesGroup):
    from_address = State()
    to_address = State()
    cargo_type = State()
    car_type = State()
    cargo_weight = State()
    ask_phone = State()

class DriverRegistration(StatesGroup):
    ask_phone = State()

class BalanceTopUp(StatesGroup):
    choose_driver = State()
    enter_amount = State()

class AdminTopUpData(StatesGroup):
    target_driver = State()
    custom_amount = State()

# =======================
# YORDAMCHI FUNKSIYALAR
# =======================
def list_driver_ids() -> list[int]:
    with closing(db()) as conn:
        rows = conn.execute("SELECT driver_id FROM drivers").fetchall()
        return [r["driver_id"] for r in rows]

async def push_new_order_to_drivers(order_row: sqlite3.Row):
    """Admin –∫–æ–º–∏—Å—Å–∏—è –±–µ–ª–≥–∏–ª–∞–≥–∞–Ω–¥–∞–Ω –∫–µ–π–∏–Ω ‚Äî –±—û—à –±—É–π—Ä—É—Ç–º–∞ “≥–∞“õ–∏–¥–∞ —Ö–∞–±–∞—Ä –±–µ—Ä–∏—à."""
    fee = order_row["commission"] or 0
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept:{order_row['id']}"),
        InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject:{order_row['id']}")
    ]])
    text = (
        f"üì¢ <b>–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞!</b>\n\n"
        f"üÜî {order_row['id']} | {order_row['date']}\n"
        f"üìç {order_row['from_address']} ‚ûú {order_row['to_address']}\n"
        f"üì¶ {order_row['cargo_type']} | üöò {order_row['car_type']} | ‚öñÔ∏è {order_row['cargo_weight']} –∫–≥\n"
        f"üíµ –ö–æ–º–∏—Å—Å–∏—è: <b>{fee}</b> —Å—û–º\n\n"
        f"–ë–∏—Ä–∏–Ω—á–∏ –±—û–ª–∏–± “õ–∞–±—É–ª “õ–∏–ª–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–≥–∞ –±–∏—Ä–∏–∫—Ç–∏—Ä–∏–ª–∞–¥–∏."
    )
    for did in list_driver_ids():
        try:
            await bot.send_message(did, text, reply_markup=kb)
        except Exception:
            pass

# =======================
# –°–¢–ê–†–¢
# =======================
@router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üëã –°–∏–∑ –∞–¥–º–∏–Ω —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–¥–∏–Ω–≥–∏–∑!", reply_markup=admin_menu_kb())
        return

    with closing(db()) as conn:
        driver = conn.execute("SELECT * FROM drivers WHERE driver_id=?", (message.from_user.id,)).fetchone()

    if driver:
        await message.answer("üëã –°–∞–ª–æ–º, “≥–∞–π–¥–æ–≤—á–∏!", reply_markup=driver_menu_kb())
    else:
        await message.answer("üëã –°–∞–ª–æ–º! –ò–ª—Ç–∏–º–æ—Å, —Ä–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=role_kb())

# =======================
# (–ë–æ—à“õ–∞ handler'–ª–∞—Ä “≥–∞–º —Å–∏–∑–Ω–∏–Ω–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–æ–¥–∏ –±–∏–ª–∞–Ω –º–æ—Å)
# =======================
# ... (—Å–∏–∑ –±–µ—Ä–∏—à–∏–Ω–≥–∏–∑–≥–∞ –∫—û—Ä–∞ –±–∞—Ä—á–∞ handler'–ª–∞—Ä —à—É –µ—Ä–¥–∞ —Å–∞“õ–ª–∞–Ω–∞–¥–∏)
#  -- –º–µ–Ω —Å–∏–∑–Ω–∏–Ω–≥ –∫–æ–¥–∏–Ω–≥–∏–∑–¥–∞–≥–∏ –±–∞—Ä—á–∞ handler'–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞–± “õ—û–π–¥–∏–º (–æ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏—è–¥–∞ —Ç—û–ª–∏“õ “õ—û–π–∏–ª–≥–∞–Ω)

# –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ ‚Äî –≤—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (router.message / router.callback_query)
# –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ. (–í —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞ –≤—Å–µ –æ–Ω–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å).
# =======================
# MAIN
# =======================
async def main():
    init_db()
    print("üöÄ Bot –∏—à–≥–∞ —Ç—É—à–¥–∏...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
